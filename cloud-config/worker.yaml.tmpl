#cloud-config
users:
  - name: joe
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDE178xsxTfHERTXpzxbd8AsH4l1kQ+2y2+s1Ed0YQTfbNzCHMBKuCmabyv56QISc0Frp6oFNutmbRQpRlxNRzvWvcdapb2+wNQIOpc6/aQBPbiyCdU6Tjcw1p3p7z/O8M9wIPZ2e9zYyUjV0EzN/iZxrdDBduF1mrAjKzeG9E+McEUaD3LIJCxmljrt3248wusHvdwpLJGTM8K8ajdrlKNET9KEI3lWTaHBxr8v/cPixBJb+rxnMZuBRV/Hc3XN13OhW3wVftGMkgjrS0oVTcXE8YlrCYCNNlw+A1hVHZ3XBbV/g1Ww65lmL2AOHrOlnUd96bbocFcm6btqUuWr1clDfEZ/FvfAvWKe9pZb2rCxqOCnLzZmB6zUPj9dS8Cg7nnXZFfsIE0p71sO2i4cYd0l9uzQpmsxYPAy+BAdRpR9P2oM1CM/DbLjlO5IIb9qTB3O4R2zaG5WpVjAdvqo9XptXKa5uIi8ZoVHvhCdnqskwaXsMpEHavQVvdxPBal01smXxFv6lLqKMVkzJRBkXBEWXvxa12pv2kiFnaxMWK95jqLFHXpjZVrYS1Z77ld9+SXGr0KjAvd6SShPg1ggiDAd4suBDUbeyVQyhzr0CGJ4auiqHsO5IDSdaFFo7xeqnBzAT+jxsBfzKhn9In7HZNf1XnG+2fF41eqnobWwMbCaQ==  joe
  - name: marian
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMSBIK7+MCULpHyUhLvYOKgQEyhkBR1n7/5oyKhzAD5pvAjqBzBcQ64S4EYxL0/Y/JDa2bMzAEzaw0VL1e2kz/nAfd7QiW3ZgyU6uYGDwHHWDekAY+Q30giQoqP3QxFSDTjUVb1EC4kIO49uzAwItwM2ah6C/Jmz4/EWMP+2MKrwCe8DUTCYPI0RyXpyj0O0Uz+11VGVCIdMbxq3O62giC4WwNUFC+RDGS4plrsOo4whrLOlE7ZrYjSp1dU+GdNQmrKXJA8j9k8asIsChljrx6wF2aS7gMF5ltj8M3ufk1Cz4FN8/5luAE0qx14I8K0yej8Ann4dohrRm8sPz3aQOh marian
  - name: puja
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDFKCoKe/Z2cT7duLiiPdgUXKcsHx+3ESCa0t4hOZtfw6BHptJ0dpDTAqbkvpGRwErVpOO9tIQittWnzgX0RLqnDB98I7eZQ04AIZwoW9AX2aMEyLgbVMTeG9Xgy79pefjVV75T2lVjXtcOY2wJtf6ZU1KFq8/dHZb7vYzzobHBq9j4vIB5ZsNI94jJm7I6TLr24vga3+MEgQrsEQdRqZ2vxacSU1h+LSdfseGQew1XlxSTfTfglUcXE0WUlEFnak9z0JwQbblEmKQsinIwO4O0Sk6FQXObCFlss//gubk64/OM/87I/aKjrmbQTRMkxyqJ5jO4yIXOxeHpp5kNA9AKSmgHABhr1ViS6ocWO8mMekbLdxDWMdViTR6XxtFSPUCgTFAirsQi6/9qfV+6u2RLhKihuajy8akFi4BYqSGr17/crrkCYydBJRUIqNmQSdzGKodTJ9d556iFZ3rCM+Xe2mm4KsHkIQ3YphPMzb0yAWEtZl1ncdqSXHz74M9b1KHUzyJgQhv5KOzhURxXR/UVBy7NNPae8XSEFId/O2uHgc/mWV5Xr5ZwxbwXsmlyto53+EmgynnPcL96RgVyiAmHL/vtvOGAzVSOPtNsnU7QG/YDfA2WrxLmuGEA0WzC63iXZCqSFbPK0adelJo9vctCB2gozrVpjqXWpskg8SZMqw== puja
  - name: teemow
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvDv/5/bOgnuNXbxB7n8n8reDpRdAPeZvuCE3pJPVYJNfL0hoNzGhw4MBLRivSd9ViMM9X1CE7iVK6RFO46yt4GK5JWYi1UM88q6I+4bcnswUAWsIFX5a/U0LK0wIR3akDDyU9WEA7CXoJ7IxF7dtIYC9OIqrD6gXc4P/UI0jZQI5iZY3qNjlKVAwsNz8pD/BE2sPpNVHumzgcLJEveoc3WMCmfBAAWQAMfRlhlJ5LjM7Py/5k1/s5Myn4L/yoAvxMWev4k2ZYpumt752/r927K7AIrK/OYTfqLPKzZYSLWAj4g7L3/65sKpFm6g+HFgDmlScgf9P4bAoLn6+mWbYL teemow
  - name: tobias
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCS/thnoYaUYmuDxwQF9ES3Jsq6KltO+QU/8PVo1tUr5vlEfEY1Q9JYHiPKJW+U0cMH3a/Jv2IDTaH629djoNdtTottaYGDINBoVIlAdR+vwm3JzVUB02mb+QXTzhzLc58fdwhHN0PS82/BcSSFpQzI7PedRGMtzS6Qxcx4YfrzC16vsdF8wMw+tVbtI2fDLwfd9NcpCDr582NrX/qOR22zeck3VVgppnuC5mGAC+XvHCRbp+4pZJ0W4fpEIGwG1cPbktvdA0wYcn7GJo7fU11066PMGMXplV+DEnQTpBUbP+NFXRuY7RzTeuTGSZHXsWO11cmpLPVVB7LdAaQuSPi1 tobias
  - name: xh3b4sd
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQClCCgsKl7+mQwD+giN6OEruV1ur/prpWXfyGHJyGGQkROZA3IcrpmRPWmKKXpCaW+G8lcb9DXD/K7/rNAh+4hpsfvCUs8u0mJ6u4El/8dcRTQaZUdLX8q3AZZ38gmk+yZz241x7LGd05D4H+aq9sVdtbcAepINUJyZ7p3yXTfCYwHC7QMYiuRFKMaUHY50shFhSYdD9TCEFtH2ybPi1/WOCX6gf90f6O0Ivo7tzwtYGV8ToIa2nO+CqwlIRiGqEy4/g9h1gCPDvgcLZmok74V6mH12whNdMDyJyuT8S1dLwNiKoYkvMbcUkpE0O/0LBCg+SsHVHmgnsNx9t0hUg8iR xh3b4sd
  - name: calvix
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9IyAZvlEL7lrxDghpqWjs/z/q4E0OtEbmKW9oD0zhYfyHIaX33YYoj3iC7oEd6OEvY4+L4awjRZ2FrXerN/tTg9t1zrW7f7Tah/SnS9XYY9zyo4uzuq1Pa6spOkjpcjtXbQwdQSATD0eeLraBWWVBDIg1COAMsAhveP04UaXAKGSQst6df007dIS5pmcATASNNBc9zzBmJgFwPDLwVviYqoqcYTASka4fSQhQ+fSj9zO1pgrCvvsmA/QeHz2Cn5uFzjh8ftqkM10sjiYibknsBuvVKZ2KpeTY6XoTOT0d9YWoJpfqAEE00+RmYLqDTQGWm5pRuZSc9vbnnH2MiEKf calvix
  - name: r7vme
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDntH7rGzQxvcxxOxsEP3scm+2e/hxKAoNjeilckuLbklMKRt+LR1M+sSKLJWgIbFTg0GITqnugk+7jPP2NbRsEiuYN7Scy0iRPWdRMbVjGbtMBHBshPp4J+uUS8n5YquMA2xA9cUa7K+VTo+Plv8pVx0LwgE7Rw5NQFqegaiClZJZapOw+LZkF/Kdrm9DAkuCH3jD543O76xx45dAIQZLWlLYNYeBdYT8ew1ewiSn8mY1F7rhLcjuoBGH1a2Z4iR3vgP36yqFDcrqD9gSG/5xupdKbss5vV4acMeTJu/DKoHCDj9GT5//PKVYjOnNlhEiQKO6Pft/aBgk8ND1ixY5 roman
  - name: rossf7
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCY0Rn2VqhtOFy7LY6nu53c9bP5Fy0KQ+P5/MA/s4aG8+veIqTyhhpHLwPF0hKbi1mq+HaFvm1nLbovZcTTG2Z+BoP/Y5kV5EOjnq415EtT3rH0YdM0h69Qxuc0KqUvU/F43XOhpEH0o8L+ZK+Vq4UrRPIDRjftc8N5h6MJszAow/kiC7d30nYsPio6FuWHH5jZaAKjucQbBsDU5r160mtVk0HCexutm3s3fHTADojZjFA3t8FJy7vO+Og+VDVzV9ai9E32mgytNL0wVE1dUGqPwoM9MrzxNC2TZedS74zqBoK9TL3y1sfVzD5RpdX4Z5FInhtTz1z4nnYzsPiYQKMx rossf7
  - name: oponder
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxEDA/Nr7++9SoFOhTeNJMAubkzJmGZWHtXul0kM+FJR0TM/1V3b4XfoRAwU9gaG88P+4venSwcbLVfvvacnlGQ8hTgw2Jlpz6Z9+iIVjru2+nYgJeELFff5bdPLYWE4Ft/VYpwGibD1DbVGldsO3I7EdaEfd5FeOF0Fk1xPK50UGvTq9CkU+wEcTc9eDzFWpLoz/69KWG/F7XEZhWqswUjHaN1UJtuBlVmoe/0OrlyIYBl2CeUzpmJHNDDv7u8gKOCOFwmzMdDieGHzIITCovIoGLhIJS1dGdT3FPvTPG/s8VOZ/QGS9rfsc5x08J0v0JqwN8GZT9FxFJECeXTN6bw== oponder
  - name: kopiczko
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDzY+7kp4XTNfinVLbDo28E0yaJUMvEabzdsheGHG3+gubakJgITZw+3m4vy45WRoF8QDOjpZ12n9ov9bpz5X8kRmHSthvWYtNRYJWCJc0d3+td1/Ki9CaHesNhKdeVYcw9g5x55h6o4EPx+g6wIsBhxqjcdZ5O37M+KWXlBfLoP4WKBjORhD4kpU+suA+rMIRF/njLs8zswHL8or3Ynp+voZM1PVCfxENp9ktNeA7W2KyUZpgDtoWxN2cnj0BOs/t2w+XZhqgsPo/9zXO6C0XIvPv69MAOHYMsomKldQgpy+MlODvu/sbP5ruB/4vGiqCg0+E2KS1ZK85KytQtfai3IcmglNtHdRKyYmf2WkY/GMGB6sgQKZWJE4XeN7+mZvRrOih2yo+/GJCkI5U0eWIUInyh/lBMIxVbckbpdZYxMd2SaERkTFNDhqSgncrPu5gW7ZFejgie9gVlkYBLI/D1XXM1YzvpSlA80D9kxLhiqdaAXP7CysPgS7EN56zM0SzHR0vxrr4dhB9XuBxlMeTtC0dvaMPkiIJj43MLDNzE4wtXEpzFQnmzRoOrPAACRhr0OcOTbsH7X+QR9JUB1ygTRSN/kHVFyL+EPRRsfuzbxw57jkzIE7ihGtcINtyv4dIFfqE7c+uDDZV/yUi2C5PI6FLHW33DXwqbzR8yZuOu2Q== pawel
  - name: marcelmue
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC9pOt/FFXonkNDGamoGMVg6wQJYS7m9r/OO2wWoEPNQS/M4nGL/szKlZfD4Z6tKS3WyeLY5XU7QjOFb3Gt3QQAaVOSDgTkfH1i+usWSNzFlhjARQkIUs0j9m30o7sXznZNOy4r73bnfUjTwYJifGUWBPq/jGokLNCxBRPCaJFi8Od5De3DyuDd93SAoXkTJaDPr7J90tzkVLI6ek5va1GSTeVdHbAifds8r8Shm0wgdmcVKiOYt7/oyzavl0x5XPzMAVXeUI0jIopsvqjiy/fS+Cq7i1TMBQ+rkycWLc8X8CM8U84OQ6eb8LgQw0A4xqVtZHOl2FlHHtWNjLhnwO5MHWjdWxCUSEshK+tS5Wm64ph37nfObupPpoMcRRTmKB2SdsigU0T/aJ9zoJorsIBKDY6lqmXoYk07XEyu5tmuG9cuiP900yLRIoCZeQ14WP3+3KDWLfjic3W8wXr0xlLOTaPNtNpX+v6X4n8R4HuJ0zQw1znEXhBlhTEZTRe1qmdPQTNwQa6XwOlEJVYOIHEOobTQVu+ReIrj+XT3b1VR531pG8M3o9Rhq29aFpAsYiDh12aGk45b+61hddF3WybpMOVQqfvYnf1lVwt/0PujJuIC7e6WuHAlRS2Sshb19ROG8w2mW1sGbp2zN7Y+MUAI5LVOHrBtRqEoZkhz+JXMzQ== marcelmue
  - name: vol
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDFGDg/p4JWewXAs8kExJnCaNXEN1v2LZf0YWWiblHFp1+i2bp8qSmAJT3i6Yw0kHY2/6MotBCKAsFtlqxuhKaFs3jDcmdOugmWz4Qj7oerQ/ypJE/wZ9PY79gbK75aEKyOdVf7dUT6Ah+oSfETgpY/3a9pVZ/dSF3WBFIBw5k4YarFzcELQE4Bo4dcsLHsNrkI9Bk6gkGbTY+1TtfJmOu0bEXxXHdEq+JfW0MFssjh3I5n0DT09qDnztAvRAjjqjlyNKNt8reErV0LlvsDM5c+426Bz9JgM5vP3sD5ai8lpuH0iCBHoo9678XTKKTYbbz0s7kgXUb0vGS+GbOcaKBKmZ8a0xDpsft9+/LbmnuUic8b4c4/cRw5wSV1IYqyDqARp/d9PaJlYa22ISGnDbYmXUTsef0PhUenK9gtYrGsVhQmkqeLYiIYqwsl7+uouFMpQDmdZjY/B4fKcRA3oRGCFuwzT1vrtJL41dw9WyzM+3xnHTMFZdko9TlgDiEeu6gdpsTGJf4VALUWgXeyW/egte2im86kjMxzQuCw/aOmiYMqwZH2YfI0dS9jLuZbxePKTUounct66SrNXBrbu2d0BiPj6bl1dG6oZhwtArRnbiG5+cTakDvLhFgahTQFAT1De7o3Nr+BfjNQkVlQNKaIPUOdypiDNJE/6q/GOHVRQw==
  - name: fgimenez
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAxnaIJtNvjR0sPO92hJla/Q71pczHn9KFx/Tc4gHHgY8kY6ysV7F9JxcfmDPzpTrYPNAylHTUR3SNWZGcgk2hYo2AChbTNyUh+PiyrvsEenMifl8e4qnb7145BStK6QdxQkZwkhVebm+T1pXEO+RwR9x2SPdV8+vHJ8EZ/FHwMyQAKGFWXYHkPCtwMgoFElB406VDeGxXCpeL1kpYGpK/2CgXgz4Dpm8nwvxfOWAmBYIDKOIrblzraQhFiyqBQp0fNlI2lgxFEGxpaMLL3WguMGqf7kKAvupUz32DWbY9i6//xFkhoaMWWiigAOZSWCcq7yE30d63Pg3mZE8YMIw3Kw==
  - name: jgsqware
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDg0b+m551vLRqsnnDrB32PrQnO41Fv62dbYYCGqjcd/if8iOuyXvxNRnbOxnsFFPVSiqY2LB8pXofEAm5MG2qupGyBvivtnq1v+6Ld9nMYTaKdz5WKhI9ypQ/jV4G1DNYrayGno13eRmGemCEnIdZeRrVxp5EfkVX0ZyJ88998Urjv6OtSLV+GSNSiIbNYyvGjLoR0dt5LCVbwbbQd1H5wXYsSoeIkKiqfS7AtMn9wDCIyM1W15yC/4UaCMEGkVfjLZB+4Y8BBfLH1vI1h43zl4EUkaq1PASDvpX0AWlclfemkK2bGEOS/UzVJsZtM73jEoSZvq/aCLe3v/0zI/5Xl
  - name: fernando
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDdprdoupVo8EH7yL3BDwj1odnJfVs6ab0BZehepcVGL7Yno5YhTM/cof/KvGWZyzER1m0hn8adm9j6HqjhskzhoUSq37b0q4v38t1oZZ7YPjF5b90bvQKnUv/5U6xqOFnE9LfotLFT8cidLLwPSDKOlPacEmSheDKTRFZwAfCJuv4eobZ3Hs0qCfzx7IjKqxYWfEJSvp9x2EUHBJnBSZ3n1ncbpyI6wyyXgjoo9v7bXhWu+HRB+LyXCPvDME7ZWihNdlX4ZesiEoyOtoVKZsBx4/L1ckyhPN2NNDNElG41/w8znrbnKBKPiBM5AGnc7XZw2TP1ivWhJ2EVBjvtPT73GMgR6AdIV4iInNdg89mLKNtHwqZ8Gyj7/xS7ufdMFST1EGnBnk/mGvK1eITWVv6Y9s5Zte84LRhEK7W2jQtND70lT3FMBKLVO/W0q+suWZIqAYWzfpASnvaXlLWIrRApzslzgbyP14Zdp1cTzjwXOoQ+FhHRlqhX7G8uGR7JvNaS732kD8xASDzZulDrkmtxDVYqKFTxRQRwolmCeDzokS2OdnRncS7m6AxwMbwI0QuQwQZp3+G0qIxKXCad+XPCQt2oaYJJRZD+dqPJOKSofbS3eZayP0nPVNqXBP55S4H2PGGSATIpSRQdfy0bebV54x7N+P3KBjxzvIpzX0nn4Q== fernando@giantswarm.io
  - name: theo
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDo5PU8w8RDWYDd8SSIKOiYJCeN398PAEJApFGpPWprewBmiDGGMHHDIDV//QR+o5MhR2hBmJ+Pw1K/Edr4u0cfGlIIb6lSVdha+jDEp0l1PtqyQzubzTH3y/RDzxCakAa419N1G3DwzJHkWBxbpyqx7i/DOYcxgQP4vCGvYgkvuOkQYCNk2hfuXAl/Aucv3JXlsuNktyXQ6XKf+Twa2Bg8jIAaYUNGqgKgzMcsCElE55bxVuYeXl441CzD2fdHmXyGwo6nefN7PZ790SxQzkGM8wBpESgc7U4IPUY/dnsn4yQBYw2meontHWGLmZjrvEYxoS7Uv4o8BX8cScgVZUhRojHvNWBBcwOx+hhuPbqoqdc8IFXQLHTTa/szvY9gwlipBejj6nJrRpl3Kxw+EX4QP/loDxkykWQUoByU479Z6/gOtgAkPOe8xZblny6r3uCZyUlaYR9ht2aOEbH8bLuYBaDTPvunMIH/RSgbNxys/Dss3ZC7MJgXtoaSpb/AGdqv1Uj4AdNJJm8544AFhmR/Tky0rms3NpaSEiwO+E5ZIJiBevqPbGWkodbfKM6uydS+wrqHOR+zTNLuwhTHVnNRZ//ePBMptnzR1qbuMmaEgmqMM1HjFflUUVdDLFK6TxcdU3YPJnnWlwGk2bCjlamGjHx0hvoJVSY+Oap6o23cJQ== theo@giantswarm.io
  - name: tobi
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzkt5Tls3jGFzHW/cj6kz3OPAYR+fINFlDFk7qEY98sjkAbKqTwntVLY7ghOdynmt+0qoQRHklLoxDTUsFoYUu2vOpdtKKCdzHR08uYS2RlvOdA+Ex0d0qEHyxX4H3b+ym+8BqCn9Bh5X4/thGWt3cqVtroqYeUAES5SneQ1rX420hN9MoZ+83vC5gwTr90GqZbsqweNTHPkhuYLylvphzxbXOitzLr61VRxjGb4gZiRD6kCXuW/uP0nrtYXkHjROXMvdj1ZZA+VLR4TAbIukApYa3JpRAApanNScgmZTsa/HhEfDVQtGesG+C6fsZVcStxuWMcpx1vZFZ6gkeIDw+R47250E3BzaDYhjGo6URuijcmepllHsU+KgpvawmgjN8hlLdbBfCDLNML23mPDIwZmUznVwL1qH0Vf744ioExKKLHx1RpiohQMCnE6K+x85tf/5NAy/VlNPxD4qeS62Bcr4DPNnn3My1h+1U1hDyclw/4SynAZXNlBh7q6ksjzaRZ68LsZhWsyOZMKuz+igkV509SYhjqZfCT34zRlxEmRaI05fVAst/mZOfsfWb1AhADNVNF172jfat0qeot/Hs/Fs4D6bpl0mwW2jQD3dB3OkytroM4TBSvG7weJwJWoDgLvy1gx6Nd4rIsUlnQKivzwmEgCaV448Y6sVpEWpCAw== tobiasrichter@giantswarm.io
write_files:
- path: /etc/kubernetes/config/azure.yaml
  owner: root
  permissions: 0600
  content: |
    cloud: ${AZURE_CLOUD}
    tenantId: ${AZURE_SP_TENANTID}
    subscriptionId: ${AZURE_SP_SUBSCRIPTIONID}
    aadClientId: ${AZURE_SP_AADCLIENTID}
    aadClientSecret: ${AZURE_SP_AADCLIENTSECRET}
    resourceGroup: ${AZURE_RESOURCEGROUP}
    location: ${AZURE_LOCATION}
    subnetName: ${AZURE_SUBNETNAME}
    securityGroupName: ${AZURE_SECGROUPNAME}
    vnetName: ${AZURE_VNETNAME}
    routeTableName: ${AZURE_ROUTETABLE}
- path: /etc/kubernetes/config/proxy-kubeconfig.yaml
  owner: root
  permissions: 0644
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: proxy
      user:
        client-certificate: /etc/kubernetes/ssl/worker-crt.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
        server: https://${API_DOMAIN_NAME}
    contexts:
    - context:
        cluster: local
        user: proxy
      name: service-account-context
    current-context: service-account-context
- path: /etc/kubernetes/config/kubelet-kubeconfig.yaml
  owner: root
  permissions: 0644
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: kubelet
      user:
        client-certificate: /etc/kubernetes/ssl/worker-crt.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
        server: https://${API_DOMAIN_NAME}
    contexts:
    - context:
        cluster: local
        user: kubelet
      name: service-account-context
    current-context: service-account-context
- path: /opt/wait-for-domains
  permissions: 0544
  content: |
      #!/bin/bash
      domains="${ETCD_DOMAIN_NAME} ${API_DOMAIN_NAME} ${VAULT_DOMAIN_NAME}"

      for domain in $domains; do
        until nslookup $domain; do
            echo "Waiting for domain $domain to be available"
            sleep 5
        done

        echo "Successfully resolved domain $domain"
      done

- path: /etc/tokens/node
  owner: root
  permissions: 0400
  content: |
    VAULT_TOKEN=${G8S_VAULT_TOKEN}

- path: /etc/ssh/sshd_config
  owner: root
  permissions: 0600
  content: |
    # Use most defaults for sshd configuration.
    UsePrivilegeSeparation sandbox
    Subsystem sftp internal-sftp
    ClientAliveInterval 180
    UseDNS no
    UsePAM yes
    PrintLastLog no # handled by PAM
    PrintMotd no # handled by PAM
    # Non defaults (#100)
    ClientAliveCountMax 2
    PasswordAuthentication no

- path: /opt/get-ca.sh
  owner: root
  permissions: 0770
  content: |
    #!/bin/bash

    if [ -z "$1" ] || [ -z "$2" ]
    then
            echo "Insufficient number of args"
            echo "$0 <ive_ip_address>:<port> <output_file>"
            exit
    fi
    echo Connecting to $1
    echo -n | openssl s_client -showcerts -connect $1 2>err.txt 1>out.txt
    if [ "$?" -ne "0" ]
    then
            cat err.txt
            exit
    fi
    echo -n Generating Certificate
    grep -in "\-----.*CERTIFICATE-----"  out.txt | cut -f 1 -d ":" 1> out1.txt
    let start_line=`tail -n 2 out1.txt | head -n 1`
    let end_line=`tail -n 1 out1.txt`
    if [ -z "$start_line" ]
    then
            echo "error"
            exit
    fi
    let nof_lines=$end_line-$start_line+1
    #echo "from $start_line to $end_line total lines $nof_lines"
    echo -n " .... "
    head -n $end_line out.txt | tail -n $nof_lines 1> out1.txt
    openssl x509 -in out1.txt -outform pem -out $2
    echo done.
    rm out.txt out1.txt err.txt

- path: /etc/sysctl.d/hardening.conf
  owner: root
  permissions: 0600
  content: |
    kernel.kptr_restrict = 2
    kernel.sysrq = 0
    net.ipv4.conf.all.send_redirects = 0
    net.ipv4.conf.default.accept_redirects = 0
    net.ipv4.tcp_timestamps = 0
    net.ipv6.conf.all.accept_redirects = 0
    net.ipv6.conf.default.accept_redirects = 0

- path: /etc/audit/rules.d/10-docker.rules
  owner: root
  permissions: 0644
  content: |
    -w /usr/bin/docker -k docker
    -w /var/lib/docker -k docker
    -w /etc/docker -k docker
    -w /etc/systemd/system/docker.service.d/10-giantswarm-extra-args.conf -k docker
    -w /etc/systemd/system/docker.service.d/01-wait-docker.conf -k docker
    -w /usr/lib/systemd/system/docker.service -k docker
    -w /usr/lib/systemd/system/docker.socket -k docker

- path: /etc/systemd/system/audit-rules.service.d/10-Wait-For-Docker.conf
  owner: root
  permissions: 0644
  content: |
    [Service]
    ExecStartPre=/bin/bash -c "while [ ! -f /etc/audit/rules.d/10-docker.rules ]; do echo 'Waiting for /etc/audit/rules.d/10-docker.rules to be written' && sleep 1; done"

coreos:
  units:
  - name: format-docker-disk.service
    command: start
    content: |
      [Unit]
      Description=Formats the disk drive
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      Environment="LABEL=docker"
      Environment="DEV=/dev/sdc"
      # Do not wipe the disk if it's already being used, so the etcd data is persistent across reboot.
      ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.xfs -L $LABEL $DEV && echo wiped; fi"
  - name: var-lib-docker.mount
    command: start
    content: |
      [Unit]
      Description=Mount disk to /var/lib/docker
      Requires=format-docker-disk.service
      After=format-docker-disk.service
      Before=docker.service
      [Mount]
      What=/dev/sdc
      Where=/var/lib/docker
      Type=xfs
  - name: wait-for-domains.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=Wait for etcd and k8s API domains to be available

      [Service]
      Type=oneshot
      ExecStart=/opt/wait-for-domains

      [Install]
      WantedBy=multi-user.target
  - name: os-hardening.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=Apply os hardening

      [Service]
      Type=oneshot
      ExecStartPre=-/bin/bash -c "gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel"
      ExecStartPre=/bin/bash -c "until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;"
      ExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf
  - name: get-vault-ca.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=get vault-ca into trusted certs
      Before=calico-certs.service kubelet-certs.service
      After=wait-for-domains.service

      [Service]
      Type=oneshot
      ExecStartPre=/opt/get-ca.sh ${VAULT_DOMAIN_NAME}:443 /etc/ssl/certs/gs-ca.pem
      ExecStart=/sbin/update-ca-certificates
      RemainAfterExit=yes
  - name: update-engine.service
    enable: false
    command: stop
    mask: true
  - name: locksmithd.service
    enable: false
    command: stop
    mask: true
  - name: etcd2.service
    enable: false
    command: stop
    mask: true
  - name: fleet.service
    enable: false
    mask: true
    command: stop
  - name: fleet.socket
    enable: false
    mask: true
    command: stop
  - name: flanneld.service
    enable: false
    command: stop
    mask: true
  - name: systemd-networkd-wait-online.service
    mask: true
  - name: docker.service
    enable: true
    command: start
    drop-ins:
    - name: 10-giantswarm-extra-args.conf
      content: |
        [Unit]
        Requires=var-lib-docker.mount
        After=var-lib-docker.mount

        [Service]
        Environment="DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs --log-opt max-size=50m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid"
        Environment="DOCKER_OPT_BIP=--bip=${DOCKER_CIDR}"
        Environment="DOCKER_OPTS=--live-restore --userland-proxy=false --icc=false --disable-legacy-registry=true"
  - name: k8s-setup-network-env.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-setup-network-env Service
      Wants=network.target docker.service
      After=network.target docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      TimeoutStartSec=0
      Environment="IMAGE=quay.io/giantswarm/k8s-setup-network-environment:1f4ffc52095ac368847ce3428ea99b257003d9b9"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: calico-certs.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=gen etcd client certs for calico
      Requires=docker.service
      After=docker.service

      [Service]
      EnvironmentFile=/etc/environment
      EnvironmentFile=/etc/network-environment
      EnvironmentFile=/etc/tokens/node
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl/etcd/
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/etcd/:/etc/kubernetes/ssl/etcd/ \
      quay.io/giantswarm/certctl:b07d0913d5cb369a6b605394bdd4be4633451be9 \
      issue \
      --vault-addr=https://${VAULT_DOMAIN_NAME} \
      --vault-token=$${VAULT_TOKEN} \
      --cluster-id=g8s \
      --common-name=${ETCD_DOMAIN_NAME} \
      --ttl=8760h \
      --crt-file=/etc/kubernetes/ssl/etcd/client-crt.pem \
      --ip-sans=127.0.0.1,${DEFAULT_IPV4} \
      --alt-names=localhost \
      --key-file=/etc/kubernetes/ssl/etcd/client-key.pem \
      --ca-file=/etc/kubernetes/ssl/etcd/client-ca.pem
      ExecStop=/usr/bin/rm -rf /etc/kubernetes/ssl/etcd/
  - name: k8s-proxy.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-proxy
      StartLimitIntervalSec=0

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      EnvironmentFile=/etc/network-environment
      Environment="IMAGE=quay.io/giantswarm/hyperkube:v1.9.3"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker-ca.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker-ca.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker-crt.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker-crt.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/worker-key.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/worker-key.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/sh -c "while ! curl --output /dev/null --silent --head --fail --cacert /etc/kubernetes/ssl/worker-ca.pem --cert /etc/kubernetes/ssl/worker-crt.pem --key /etc/kubernetes/ssl/worker-key.pem https://${API_DOMAIN_NAME}; do sleep 1 && echo 'Waiting for master'; done"
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --net=host --privileged=true \
      --name $NAME \
      -v /usr/share/ca-certificates:/etc/ssl/certs \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      $IMAGE \
      /hyperkube proxy \
      --master=https://${API_DOMAIN_NAME} \
      --proxy-mode=iptables \
      --logtostderr=true \
      --kubeconfig=/etc/kubernetes/config/proxy-kubeconfig.yaml \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: kubelet-certs.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=api-certs
      Requires=docker.service
      After=docker.service

      [Service]
      EnvironmentFile=/etc/environment
      EnvironmentFile=/etc/network-environment
      EnvironmentFile=/etc/tokens/node
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl/
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      quay.io/giantswarm/certctl:b07d0913d5cb369a6b605394bdd4be4633451be9 \
      issue \
      --vault-addr=https://${VAULT_DOMAIN_NAME} \
      --vault-token=$${VAULT_TOKEN} \
      --cluster-id=g8s \
      --common-name=${API_DOMAIN_NAME} \
      --ttl=8760h \
      --crt-file=/etc/kubernetes/ssl/worker-crt.pem \
      --key-file=/etc/kubernetes/ssl/worker-key.pem \
      --ca-file=/etc/kubernetes/ssl/worker-ca.pem
  - name: k8s-kubelet.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=k8s-kubelet
      StartLimitIntervalSec=0
      After=kubelet-certs.service
      Requires=kubelet-certs.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      EnvironmentFile=/etc/network-environment
      Environment="IMAGE=quay.io/giantswarm/hyperkube:v1.9.3"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --pid=host --net=host --privileged=true \
      -v /:/rootfs:ro,shared \
      -v /sys:/sys:ro \
      -v /dev:/dev:rw \
      -v /run/calico/:/run/calico/:rw \
      -v /run/docker/:/run/docker/:rw \
      -v /run/docker.sock:/run/docker.sock:rw \
      -v /usr/lib/os-release:/etc/os-release \
      -v /usr/share/ca-certificates/:/etc/ssl/certs \
      -v /var/lib/docker/:/var/lib/docker:rw,shared \
      -v /var/lib/kubelet/:/var/lib/kubelet:rw,shared \
      -v /var/log:/var/log:rw \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      -v /etc/cni/net.d/:/etc/cni/net.d/ \
      -v /opt/cni/bin/:/opt/cni/bin/ \
      -e ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/client-ca.pem \
      -e ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/client-crt.pem \
      -e ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/client-key.pem \
      --name $NAME \
      $IMAGE \
      /hyperkube kubelet \
      --address=${DEFAULT_IPV4} \
      --port=10250 \
      --node-ip=${DEFAULT_IPV4} \
      --containerized \
      --enable-server \
      --logtostderr=true \
      --cloud-provider=azure \
      --cloud-config=/etc/kubernetes/config/azure.yaml \
      --machine-id-file=/rootfs/etc/machine-id \
      --cadvisor-port=4194 \
      --healthz-bind-address=${DEFAULT_IPV4} \
      --healthz-port=10248 \
      --cluster-dns=${K8S_DNS_IP} \
      --cluster-domain=cluster.local \
      --feature-gates=ExpandPersistentVolumes=true \
      --network-plugin=cni \
      --register-node=true \
      --allow-privileged=true \
      --kubeconfig=/etc/kubernetes/config/kubelet-kubeconfig.yaml \
      --require-kubeconfig=true \
      --node-labels="kubernetes.io/hostname=$HOSTNAME,ip=${DEFAULT_IPV4}," \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  update:
    reboot-strategy: off
