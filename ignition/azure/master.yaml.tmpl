storage:
  files:
    - path: /srv/calico-all.yaml
      filesystem: root
      mode: 644
      contents: 
        inline: |
          #
          # Source: https://docs.projectcalico.org/v3.0/getting-started/kubernetes/installation/hosted/kubernetes-datastore/policy-only/1.7/calico.yaml
          #
          # Changed values:
          #   - CALICO_IPV4POOL_IPIP = off
          #   - CALICO_IPV4POOL_CIDR = parameterized
          #
          # Calico Version v3.0.5
          # https://docs.projectcalico.org/v3.0/releases#v3.0.5
          # This manifest includes the following component versions:
          #   calico/node:v3.0.5
          #   calico/cni:v2.0.4

          # This ConfigMap is used to configure a self-hosted Calico installation.
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: calico-config
            namespace: kube-system
          data:
            # To enable Typha, set this to "calico-typha" *and* set a non-zero value for Typha replicas
            # below.  We recommend using Typha if you have more than 50 nodes. Above 100 nodes it is
            # essential.
            typha_service_name: "none"
            # The CNI network configuration to install on each node.
            cni_network_config: |-
              {
                "name": "k8s-pod-network",
                "cniVersion": "0.3.0",
                "plugins": [
                  {
                    "type": "calico",
                    "log_level": "info",
                    "datastore_type": "kubernetes",
                    "nodename": "__KUBERNETES_NODE_NAME__",
                    "mtu": 1500,
                    "ipam": {
                        "type": "host-local",
                        "subnet": "usePodCidr"
                    },
                    "policy": {
                        "type": "k8s",
                        "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
                    },
                    "kubernetes": {
                        "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                        "kubeconfig": "__KUBECONFIG_FILEPATH__"
                    }
                  },
                  {
                    "type": "portmap",
                    "snat": true,
                    "capabilities": {"portMappings": true}
                  }
                ]
              }

          ---

          # This manifest creates a Service, which will be backed by Calico's Typha daemon.
          # Typha sits in between Felix and the API server, reducing Calico's load on the API server.

          apiVersion: v1
          kind: Service
          metadata:
            name: calico-typha
            namespace: kube-system
            labels:
              k8s-app: calico-typha
          spec:
            ports:
              - port: 5473
                protocol: TCP
                targetPort: calico-typha
                name: calico-typha
            selector:
              k8s-app: calico-typha

          ---

          # This manifest creates a Deployment of Typha to back the above service.

          apiVersion: apps/v1beta1
          kind: Deployment
          metadata:
            name: calico-typha
            namespace: kube-system
            labels:
              k8s-app: calico-typha
          spec:
            # Number of Typha replicas.  To enable Typha, set this to a non-zero value *and* set the
            # typha_service_name variable in the calico-config ConfigMap above.
            #
            # We recommend using Typha if you have more than 50 nodes.  Above 100 nodes it is essential
            # (when using the Kubernetes datastore).  Use one replica for every 100-200 nodes.  In
            # production, we recommend running at least 3 replicas to reduce the impact of rolling upgrade.
            replicas: 0
            revisionHistoryLimit: 2
            template:
              metadata:
                labels:
                  k8s-app: calico-typha
                annotations:
                  # This, along with the CriticalAddonsOnly toleration below, marks the pod as a critical
                  # add-on, ensuring it gets priority scheduling and that its resources are reserved
                  # if it ever gets evicted.
                  scheduler.alpha.kubernetes.io/critical-pod: ''
              spec:
                tolerations:
                - key: CriticalAddonsOnly
                  operator: Exists
                # Since Calico can't network a pod until Typha is up, we need to run Typha itself
                # as a host-networked pod.
                hostNetwork: true
                serviceAccountName: calico-node
                containers:
                - image: quay.io/giantswarm/typha:v0.6.3
                  name: calico-typha
                  ports:
                  - containerPort: 5473
                    name: calico-typha
                    protocol: TCP
                  env:
                    # Enable "info" logging by default.  Can be set to "debug" to increase verbosity.
                    - name: TYPHA_LOGSEVERITYSCREEN
                      value: "info"
                    # Disable logging to file and syslog since those don't make sense in Kubernetes.
                    - name: TYPHA_LOGFILEPATH
                      value: "none"
                    - name: TYPHA_LOGSEVERITYSYS
                      value: "none"
                    # Monitor the Kubernetes API to find the number of running instances and rebalance
                    # connections.
                    - name: TYPHA_CONNECTIONREBALANCINGMODE
                      value: "kubernetes"
                    - name: TYPHA_DATASTORETYPE
                      value: "kubernetes"
                    - name: TYPHA_HEALTHENABLED
                      value: "true"
                    # Uncomment these lines to enable prometheus metrics.  Since Typha is host-networked,
                    # this opens a port on the host, which may need to be secured.
                    #- name: TYPHA_PROMETHEUSMETRICSENABLED
                    #  value: "true"
                    #- name: TYPHA_PROMETHEUSMETRICSPORT
                    #  value: "9093"
                  livenessProbe:
                    httpGet:
                      path: /liveness
                      port: 9098
                    periodSeconds: 30
                    initialDelaySeconds: 30
                  readinessProbe:
                    httpGet:
                      path: /readiness
                      port: 9098
                    periodSeconds: 10

          ---

          # This manifest installs the calico/node container, as well
          # as the Calico CNI plugins and network config on
          # each master and worker node in a Kubernetes cluster.
          kind: DaemonSet
          apiVersion: extensions/v1beta1
          metadata:
            name: calico-node
            namespace: kube-system
            labels:
              k8s-app: calico-node
          spec:
            selector:
              matchLabels:
                k8s-app: calico-node
            updateStrategy:
              type: RollingUpdate
              rollingUpdate:
                maxUnavailable: 1
            template:
              metadata:
                labels:
                  k8s-app: calico-node
                annotations:
                  # This, along with the CriticalAddonsOnly toleration below,
                  # marks the pod as a critical add-on, ensuring it gets
                  # priority scheduling and that its resources are reserved
                  # if it ever gets evicted.
                  scheduler.alpha.kubernetes.io/critical-pod: ''
              spec:
                hostNetwork: true
                serviceAccountName: calico-node
                tolerations:
                  # Allow the pod to run on the master.  This is required for
                  # the master to communicate with pods.
                  - key: node-role.kubernetes.io/master
                    effect: NoSchedule
                  # Mark the pod as a critical add-on for rescheduling.
                  - key: CriticalAddonsOnly
                    operator: Exists
                # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
                # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
                terminationGracePeriodSeconds: 0
                containers:
                  # Runs calico/node container on each Kubernetes node.  This
                  # container programs network policy and routes on each
                  # host.
                  - name: calico-node
                    image: quay.io/giantswarm/node:v3.0.5
                    env:
                      # Use Kubernetes API as the backing datastore.
                      - name: DATASTORE_TYPE
                        value: "kubernetes"
                      # Enable felix info logging.
                      - name: FELIX_LOGSEVERITYSCREEN
                        value: "info"
                      # Don't enable BGP.
                      - name: CALICO_NETWORKING_BACKEND
                        value: "none"
                      # Cluster type to identify the deployment type
                      - name: CLUSTER_TYPE
                        value: "k8s"
                      # Disable file logging so `kubectl logs` works.
                      - name: CALICO_DISABLE_FILE_LOGGING
                        value: "true"
                      # Set Felix endpoint to host default action to ACCEPT.
                      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                        value: "ACCEPT"
                      # Disable IPV6 on Kubernetes.
                      - name: FELIX_IPV6SUPPORT
                        value: "false"
                      # Wait for the datastore.
                      - name: WAIT_FOR_DATASTORE
                        value: "true"
                      # The default IPv4 pool to create on startup if none exists. Pod IPs will be
                      # chosen from this range. Changing this value after installation will have
                      # no effect. This should fall within `--cluster-cidr`.
                      - name: CALICO_IPV4POOL_CIDR
                        value: "${POD_CIDR}"
                      # Enable IPIP
                      - name: CALICO_IPV4POOL_IPIP
                        value: "off"
                      # Typha support: controlled by the ConfigMap.
                      - name: FELIX_TYPHAK8SSERVICENAME
                        valueFrom:
                          configMapKeyRef:
                            name: calico-config
                            key: typha_service_name
                      # Set based on the k8s node name.
                      - name: NODENAME
                        valueFrom:
                          fieldRef:
                            fieldPath: spec.nodeName
                      - name: FELIX_HEALTHENABLED
                        value: "true"
                    securityContext:
                      privileged: true
                    resources:
                      requests:
                        cpu: 250m
                    livenessProbe:
                      httpGet:
                        path: /liveness
                        port: 9099
                      periodSeconds: 10
                      initialDelaySeconds: 10
                      failureThreshold: 6
                    readinessProbe:
                      httpGet:
                        path: /readiness
                        port: 9099
                      periodSeconds: 10
                    volumeMounts:
                      - mountPath: /lib/modules
                        name: lib-modules
                        readOnly: true
                      - mountPath: /var/run/calico
                        name: var-run-calico
                        readOnly: false
                  # This container installs the Calico CNI binaries
                  # and CNI network config file on each node.
                  - name: install-cni
                    image: quay.io/giantswarm/cni:v2.0.4
                    command: ["/install-cni.sh"]
                    env:
                      # Name of the CNI config file to create.
                      - name: CNI_CONF_NAME
                        value: "10-calico.conflist"
                      # The CNI network config to install on each node.
                      - name: CNI_NETWORK_CONFIG
                        valueFrom:
                          configMapKeyRef:
                            name: calico-config
                            key: cni_network_config
                      # Set the hostname based on the k8s node name.
                      - name: KUBERNETES_NODE_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: spec.nodeName
                    volumeMounts:
                      - mountPath: /host/opt/cni/bin
                        name: cni-bin-dir
                      - mountPath: /host/etc/cni/net.d
                        name: cni-net-dir
                volumes:
                  # Used by calico/node.
                  - name: lib-modules
                    hostPath:
                      path: /lib/modules
                  - name: var-run-calico
                    hostPath:
                      path: /var/run/calico
                  # Used to install CNI.
                  - name: cni-bin-dir
                    hostPath:
                      path: /opt/cni/bin
                  - name: cni-net-dir
                    hostPath:
                      path: /etc/cni/net.d

          # Create all the CustomResourceDefinitions needed for
          # Calico policy-only mode.
          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico Felix Configuration
          kind: CustomResourceDefinition
          metadata:
             name: felixconfigurations.crd.projectcalico.org
          spec:
            scope: Cluster
            group: crd.projectcalico.org
            version: v1
            names:
              kind: FelixConfiguration
              plural: felixconfigurations
              singular: felixconfiguration

          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico BGP Configuration
          kind: CustomResourceDefinition
          metadata:
            name: bgpconfigurations.crd.projectcalico.org
          spec:
            scope: Cluster
            group: crd.projectcalico.org
            version: v1
            names:
              kind: BGPConfiguration
              plural: bgpconfigurations
              singular: bgpconfiguration

          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico IP Pools
          kind: CustomResourceDefinition
          metadata:
            name: ippools.crd.projectcalico.org
          spec:
            scope: Cluster
            group: crd.projectcalico.org
            version: v1
            names:
              kind: IPPool
              plural: ippools
              singular: ippool

          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico Cluster Information
          kind: CustomResourceDefinition
          metadata:
            name: clusterinformations.crd.projectcalico.org
          spec:
            scope: Cluster
            group: crd.projectcalico.org
            version: v1
            names:
              kind: ClusterInformation
              plural: clusterinformations
              singular: clusterinformation

          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico Global Network Policies
          kind: CustomResourceDefinition
          metadata:
            name: globalnetworkpolicies.crd.projectcalico.org
          spec:
            scope: Cluster
            group: crd.projectcalico.org
            version: v1
            names:
              kind: GlobalNetworkPolicy
              plural: globalnetworkpolicies
              singular: globalnetworkpolicy

          ---

          apiVersion: apiextensions.k8s.io/v1beta1
          description: Calico Network Policies
          kind: CustomResourceDefinition
          metadata:
            name: networkpolicies.crd.projectcalico.org
          spec:
            scope: Namespaced
            group: crd.projectcalico.org
            version: v1
            names:
              kind: NetworkPolicy
              plural: networkpolicies
              singular: networkpolicy

          ---

          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: calico-node
            namespace: kube-system
    - path: /srv/default-storage-class.yaml
      filesystem: root
      mode: 644
      contents:
        inline:  |
          apiVersion: storage.k8s.io/v1beta1
          kind: StorageClass
          metadata:
            name: default
            annotations:
              storageclass.beta.kubernetes.io/is-default-class: "true"
            labels:
              kubernetes.io/cluster-service: "true"
          provisioner: kubernetes.io/azure-disk
          parameters:
            kind: Managed
            storageaccounttype: Premium_LRS
          allowVolumeExpansion: true
          ---
          apiVersion: storage.k8s.io/v1beta1
          kind: StorageClass
          metadata:
            name: managed-premium
            annotations:
            labels:
              kubernetes.io/cluster-service: "true"
          provisioner: kubernetes.io/azure-disk
          parameters:
            kind: Managed
            storageaccounttype: Premium_LRS
          allowVolumeExpansion: true
          ---
          apiVersion: storage.k8s.io/v1beta1
          kind: StorageClass
          metadata:
            name: managed-standard
            annotations:
            labels:
              kubernetes.io/cluster-service: "true"
          provisioner: kubernetes.io/azure-disk
          parameters:
            kind: Managed
            storageaccounttype: Standard_LRS
          allowVolumeExpansion: true
    - path: /srv/coredns-all.yaml
      filesystem: root
      mode: 0644
      contents:
        inline:  |
          apiVersion: v1
          kind: Service
          metadata:
            name: coredns
            namespace: kube-system
            labels:
              k8s-app: coredns
              kubernetes.io/cluster-service: "true"
              kubernetes.io/name: "CoreDNS"
          spec:
            selector:
              k8s-app: coredns
            clusterIP: ${K8S_DNS_IP}
            ports:
            - name: dns
              port: 53
              protocol: UDP
            - name: dns-tcp
              port: 53
              protocol: TCP
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: coredns
            namespace: kube-system
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: coredns
            namespace: kube-system
          data:
            Corefile: |
              .:53 {
                  errors
                  health
                  kubernetes cluster.local ${K8S_SERVICE_CIDR} ${POD_CIDR} {
                    pods insecure
                    upstream
                    fallthrough in-addr.arpa ip6.arpa
                  }
                  prometheus :9153
                  proxy . /etc/resolv.conf
                  cache 30
              }
          ---
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: coredns
            namespace: kube-system
            labels:
              k8s-app: coredns
              kubernetes.io/name: "CoreDNS"
          spec:
            replicas: 3
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxUnavailable: 1
            selector:
              matchLabels:
                k8s-app: coredns
            template:
              metadata:
                labels:
                  k8s-app: coredns
              spec:
                serviceAccountName: coredns
                tolerations:
                  - key: "CriticalAddonsOnly"
                    operator: "Exists"
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - key: k8s-app
                            operator: In
                            values:
                            - coredns
                        topologyKey: kubernetes.io/hostname
                containers:
                - name: coredns
                  image: quay.io/giantswarm/coredns:1.1.1
                  imagePullPolicy: IfNotPresent
                  args: [ "-conf", "/etc/coredns/Corefile" ]
                  volumeMounts:
                  - name: config-volume
                    mountPath: /etc/coredns
                  ports:
                  - containerPort: 53
                    name: dns
                    protocol: UDP
                  - containerPort: 53
                    name: dns-tcp
                    protocol: TCP
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                      scheme: HTTP
                    initialDelaySeconds: 60
                    timeoutSeconds: 5
                    successThreshold: 1
                    failureThreshold: 5
                dnsPolicy: Default
                volumes:
                  - name: config-volume
                    configMap:
                      name: coredns
                      items:
                      - key: Corefile
                        path: Corefile
    - path: /srv/default-backend-dep.yaml
      filesystem: root
      mode: 0644
      contents: 
        inline: |
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: default-http-backend
            namespace: kube-system
            labels:
              k8s-app: default-http-backend
          spec:
            replicas: 2
            template:
              metadata:
                labels:
                  k8s-app: default-http-backend
              spec:
                containers:
                - name: default-http-backend
                  image: quay.io/giantswarm/defaultbackend:1.0
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8080
                      scheme: HTTP
                    initialDelaySeconds: 30
                    timeoutSeconds: 5
                  ports:
                  - containerPort: 8080
                  resources:
                    limits:
                      cpu: 10m
                      memory: 20Mi
                    requests:
                      cpu: 10m
                      memory: 20Mi
    - path: /srv/default-backend-svc.yaml
      filesystem: root
      mode: 0644
      contents:
        inline:  |
          apiVersion: v1
          kind: Service
          metadata:
            name: default-http-backend
            namespace: kube-system
            labels:
              k8s-app: default-http-backend
          spec:
            type: NodePort
            ports:
            - port: 80
              targetPort: 8080
            selector:
              k8s-app: default-http-backend
    - path: /srv/ingress-controller-cm.yaml
      filesystem: root
      mode: 0644
      contents: 
        inline: |
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: ingress-nginx
            labels:
              k8s-addon: ingress-nginx.addons.k8s.io
          data:
            variables-hash-bucket-size: "128"
            server-name-hash-bucket-size: "1024"
            server-name-hash-max-size: "1024"
    - path: /srv/ingress-controller-sa.yaml
      filesystem: root
      mode: 644
      contents:
        inline:  |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: nginx-ingress-controller
            namespace: kube-system
    - path: /srv/ingress-controller-dep.yaml
      filesystem: root
      mode: 0644
      contents:
        inline:  |
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: nginx-ingress-controller
            namespace: kube-system
            labels:
              k8s-app: nginx-ingress-controller
            annotations:
              prometheus.io/port: '10254'
              prometheus.io/scrape: 'true'
          spec:
            replicas: 3
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxUnavailable: 1
            template:
              metadata:
                labels:
                  k8s-app: nginx-ingress-controller
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                            - key: k8s-app
                              operator: In
                              values:
                              - nginx-ingress-controller
                        topologyKey: kubernetes.io/hostname
                serviceAccountName: nginx-ingress-controller
                containers:
                - name: nginx-ingress-controller
                  image: quay.io/giantswarm/nginx-ingress-controller:0.11.0
                  args:
                  - /nginx-ingress-controller
                  - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
                  - --configmap=$(POD_NAMESPACE)/ingress-nginx
                  - --annotations-prefix=nginx.ingress.kubernetes.io
                  env:
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                  readinessProbe:
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                    initialDelaySeconds: 10
                    timeoutSeconds: 1
                  ports:
                  - containerPort: 80
                    hostPort: 80
                  - containerPort: 443
                    hostPort: 443
    - path: /srv/ingress-controller-svc.yaml
      filesystem: root
      mode: 0644
      contents: 
        inline: |
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-ingress-controller
            namespace: kube-system
            labels:
              k8s-app: nginx-ingress-controller
          spec:
            type: NodePort
            ports:
            - name: http
              port: 80
              nodePort: 30010
              protocol: TCP
              targetPort: 80
            - name: https
              port: 443
              nodePort: 30011
              protocol: TCP
              targetPort: 443
            selector:
              k8s-app: nginx-ingress-controller
    - path: /srv/kube-proxy-sa.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: kube-proxy
            namespace: kube-system
    - path: /srv/kube-proxy-ds.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: extensions/v1beta1
          kind: DaemonSet
          metadata:
            name: kube-proxy
            namespace: kube-system
            labels:
              component: kube-proxy
              k8s-app: kube-proxy
              kubernetes.io/cluster-service: "true"
          spec:
            selector:
              matchLabels:
                k8s-app: kube-proxy
            updateStrategy:
              type: RollingUpdate
              rollingUpdate:
                maxUnavailable: 1
            template:
              metadata:
                labels:
                  component: kube-proxy
                  k8s-app: kube-proxy
                  kubernetes.io/cluster-service: "true"
              spec:
                tolerations:
                - key: node-role.kubernetes.io/master
                  operator: Exists
                  effect: NoSchedule
                hostNetwork: true
                serviceAccountName: kube-proxy
                containers:
                - name: kube-proxy
                  image: quay.io/giantswarm/hyperkube:v1.10.2
                  command:
                  - /hyperkube
                  - proxy
                  - --master=https://${API_DOMAIN_NAME}
                  - --proxy-mode=iptables
                  - --logtostderr=true
                  - --kubeconfig=/etc/kubernetes/config/proxy-kubeconfig.yaml
                  - --v=2
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 10256
                    initialDelaySeconds: 10
                    periodSeconds: 3
                  resources:
                    requests:
                      memory: "80Mi"
                      cpu: "75m"
                  securityContext:
                    privileged: true
                  volumeMounts:
                  - mountPath: /etc/ssl/certs
                    name: ssl-certs-host
                    readOnly: true
                  - mountPath: /etc/kubernetes/config/
                    name: config-kubernetes
                    readOnly: true
                  - mountPath: /etc/kubernetes/ssl
                    name: ssl-certs-kubernetes
                    readOnly: true
                volumes:
                - hostPath:
                    path: /etc/kubernetes/config/
                  name: config-kubernetes
                - hostPath:
                    path: /etc/kubernetes/ssl/
                  name: ssl-certs-kubernetes
                - hostPath:
                    path: /usr/share/ca-certificates
                  name: ssl-certs-host
    - path: /srv/rbac-roles.yaml
      filesystem: root
      mode: 0644
      contents: 
        inline: |
          ## Calico
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: calico-node
            namespace: kube-system
          rules:
            - apiGroups: [""]
              resources:
                - namespaces
              verbs:
                - get
                - list
                - watch
            - apiGroups: [""]
              resources:
                - pods/status
              verbs:
                - update
            - apiGroups: [""]
              resources:
                - pods
              verbs:
                - get
                - list
                - watch
                - patch
            - apiGroups: [""]
              resources:
                - services
              verbs:
                - get
            - apiGroups: [""]
              resources:
                - endpoints
              verbs:
                - get
            - apiGroups: [""]
              resources:
                - nodes
              verbs:
                - get
                - list
                - update
                - watch
            - apiGroups: ["extensions"]
              resources:
                - networkpolicies
              verbs:
                - get
                - list
                - watch
            - apiGroups: ["crd.projectcalico.org"]
              resources:
                - globalfelixconfigs
                - felixconfigurations
                - bgppeers
                - globalbgpconfigs
                - bgpconfigurations
                - ippools
                - globalnetworkpolicies
                - networkpolicies
                - clusterinformations
              verbs:
                - create
                - get
                - list
                - update
                - watch
          ---
          ## CoreDNS
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            labels:
              kubernetes.io/bootstrapping: rbac-defaults
            name: system:coredns
          rules:
          - apiGroups:
            - ""
            resources:
            - endpoints
            - services
            - pods
            - namespaces
            verbs:
            - list
            - watch
          ---
          ## IC
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            name: nginx-ingress-controller
            namespace: kube-system
          rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
                - endpoints
                - nodes
                - pods
                - secrets
              verbs:
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - nodes
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - services
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - "extensions"
              resources:
                - ingresses
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                  - events
              verbs:
                  - create
                  - patch
            - apiGroups:
                - "extensions"
              resources:
                - ingresses/status
              verbs:
                - update
          ---
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: Role
          metadata:
            name: nginx-ingress-role
            namespace: kube-system
          rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
                - pods
                - secrets
                - namespaces
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - configmaps
              resourceNames:
                # Defaults to "<election-id>-<ingress-class>"
                # Here: "<ingress-controller-leader>-<nginx>"
                # This has to be adapted if you change either parameter
                # when launching the nginx-ingress-controller.
                - "ingress-controller-leader-nginx"
              verbs:
                - get
                - update
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - create
            - apiGroups:
                - ""
              resources:
                - endpoints
              verbs:
                - get
                - create
                - update
    - path: /srv/rbac-bindings.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          ## User
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: giantswarm-admin
          subjects:
          - kind: User
            name: ${API_DOMAIN_NAME}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
          ---
          ## Worker
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: kubelet
          subjects:
          - kind: User
            name: ${API_DOMAIN_NAME}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:node
            apiGroup: rbac.authorization.k8s.io
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: proxy
          subjects:
          - kind: User
            name: ${API_DOMAIN_NAME}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:node-proxier
            apiGroup: rbac.authorization.k8s.io
          ---
          ## Master
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: kube-controller-manager
          subjects:
          - kind: User
            name: ${API_DOMAIN_NAME}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:kube-controller-manager
            apiGroup: rbac.authorization.k8s.io
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: kube-scheduler
          subjects:
          - kind: User
            name: ${API_DOMAIN_NAME}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: system:kube-scheduler
            apiGroup: rbac.authorization.k8s.io
          ---
          ## Calico
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: calico-node
          subjects:
          - kind: ServiceAccount
            name: calico-node
            namespace: kube-system
          roleRef:
            kind: ClusterRole
            name: calico-node
            apiGroup: rbac.authorization.k8s.io
          ---
          ## DNS
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"
            labels:
              kubernetes.io/bootstrapping: rbac-defaults
            name: system:coredns
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:coredns
          subjects:
          - kind: ServiceAccount
            name: coredns
            namespace: kube-system
          ---
          ## IC
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: nginx-ingress-controller
          subjects:
          - kind: ServiceAccount
            name: nginx-ingress-controller
            namespace: kube-system
          roleRef:
            kind: ClusterRole
            name: nginx-ingress-controller
            apiGroup: rbac.authorization.k8s.io
          ---
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: nginx-ingress-controller
            namespace: kube-system
          subjects:
          - kind: ServiceAccount
            name: nginx-ingress-controller
            namespace: kube-system
          roleRef:
            kind: Role
            name: nginx-ingress-role
            apiGroup: rbac.authorization.k8s.io
          ---
          ## kube-proxy
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: system:kube-proxy
          subjects:
            - kind: ServiceAccount
              name: kube-proxy
              namespace: kube-system
          roleRef:
            kind: ClusterRole
            name: system:node-proxier
            apiGroup: rbac.authorization.k8s.io
    - path: /srv/psp-policies.yaml
      filesystem: root
      mode: 0644
      contents: 
        inline: |
          apiVersion: extensions/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: privileged
          spec:
            fsGroup:
              rule: RunAsAny
            privileged: true
            runAsUser:
              rule: RunAsAny
            seLinux:
              rule: RunAsAny
            supplementalGroups:
              rule: RunAsAny
            volumes:
            - '*'
            hostPID: true
            hostIPC: true
            hostNetwork: true
            hostPorts:
            - min: 1
              max: 65536
          ---
          apiVersion: extensions/v1beta1
          kind: PodSecurityPolicy
          metadata:
            name: restricted
          spec:
            privileged: false
            fsGroup:
              rule: RunAsAny
            runAsUser:
              rule: RunAsAny
            seLinux:
              rule: RunAsAny
            supplementalGroups:
              rule: RunAsAny
            volumes:
            - 'emptyDir'
            - 'secret'
            - 'downwardAPI'
            - 'configMap'
            - 'persistentVolumeClaim'
            - 'projected'
            hostPID: false
            hostIPC: false
            hostNetwork: false
    - path: /srv/psp-roles.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          # restrictedPSP grants access to use
          # the restricted PSP.
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            name: restricted-psp-user
          rules: 
          - apiGroups:
            - extensions
            resources:
            - podsecuritypolicies
            resourceNames:
            - restricted
            verbs:
            - use
          ---
          # privilegedPSP grants access to use the privileged
          # PSP.
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            name: privileged-psp-user
          rules: 
          - apiGroups:
            - extensions
            resources:
            - podsecuritypolicies
            resourceNames:
            - privileged
            verbs:
            - use
    - path: /srv/psp-bindings.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
              name: privileged-psp-users
          subjects:
          - kind: ServiceAccount
            name: calico-node
            namespace: kube-system
          - kind: ServiceAccount
            name: coredns
            namespace: kube-system
          - kind: ServiceAccount
            name: nginx-ingress-controller
            namespace: kube-system
          - kind: ServiceAccount
            name: kube-proxy
            namespace: kube-system
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: privileged-psp-user
          ---
          # grants the restricted PSP role to
          # the all authenticated users.
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
              name: restricted-psp-users
          subjects:
          - kind: Group
            apiGroup: rbac.authorization.k8s.io
            name: system:authenticated
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: restricted-psp-user
    - path: /opt/wait-for-domains
      filesystem: root
      mode: 0544
      contents:
        inline: |
            #!/bin/bash
            domains="${ETCD_DOMAIN_NAME} ${API_DOMAIN_NAME} ${VAULT_DOMAIN_NAME}"

            for domain in $domains; do
              until nslookup $domain; do
                  echo "Waiting for domain $domain to be available"
                  sleep 5
              done

              echo "Successfully resolved domain $domain"
            done
    - path: /opt/k8s-addons
      filesystem: root
      mode: 0544
      contents:
        inline: |
            #!/bin/bash
            KUBECTL=quay.io/giantswarm/docker-kubectl:f51f93c30d27927d2b33122994c0929b3e6f2432

            /usr/bin/docker pull $KUBECTL

            # wait for healthy master
            while [ "$(/usr/bin/docker run --net=host --rm $KUBECTL get cs | grep Healthy | wc -l)" -ne "3" ]; do sleep 1 && echo 'Waiting for healthy k8s'; done

            # apply Security bootstrap (RBAC and PSP)
            SECURITY_FILES="rbac-roles.yaml\
              rbac-bindings.yaml\
              psp-policies.yaml\
              psp-roles.yaml\
              psp-bindings.yaml"

            for manifest in $SECURITY_FILES
            do
                while
                    /usr/bin/docker run --net=host --rm -v /srv:/srv $KUBECTL apply -f /srv/$manifest
                    [ "$?" -ne "0" ]
                do
                    echo "failed to apply /srv/$manifest, retrying in 5 sec"
                    sleep 5s
                done
            done

            # apply calico CNI
            CALICO_FILE="calico-all.yaml"

            while
                /usr/bin/docker run --net=host --rm -v /srv:/srv $KUBECTL apply -f /srv/$CALICO_FILE
                [ "$?" -ne "0" ]
            do
                echo "failed to apply /srv/$CALICO_FILE, retrying in 5 sec"
                sleep 5s
            done

            # wait for healthy calico - we check for pods - desired vs ready
            while
                # result of this is 'eval [ "$DESIRED_POD_COUNT" -eq "$READY_POD_COUNT" ]'
                /usr/bin/docker run --net=host --rm -v /etc/kubernetes:/etc/kubernetes $KUBECTL -n kube-system  get ds calico-node 2>/dev/null >/dev/null
                RET_CODE_1=$?
                eval $(/usr/bin/docker run --net=host --rm $KUBECTL -n kube-system get ds calico-node | tail -1 | awk '{print "[ \"" $2"\" -eq \""$4"\" ] "}')
                RET_CODE_2=$?
                [ "$RET_CODE_1" -ne "0" ] || [ "$RET_CODE_2" -ne "0" ]
            do
                echo "Waiting for calico to be ready . . "
                sleep 3s
            done

            # apply k8s addons
            MANIFESTS="kube-proxy-sa.yaml kube-proxy-ds.yaml default-storage-class.yaml coredns-all.yaml default-backend-dep.yaml default-backend-svc.yaml ingress-controller-cm.yaml ingress-controller-sa.yaml ingress-controller-dep.yaml ingress-controller-svc.yaml"

            for manifest in $MANIFESTS
            do
                while
                    /usr/bin/docker run --net=host --rm -v /srv:/srv $KUBECTL apply -f /srv/$manifest
                    [ "$?" -ne "0" ]
                do
                    echo "failed to apply /srv/$manifest, retrying in 5 sec"
                    sleep 5s
                done
            done
            echo "Addons successfully installed"

    - path: /etc/kubernetes/config/azure.yaml
      filesystem: root
      mode: 0600
      contents:
        inline: |
          cloud: ${AZURE_CLOUD}
          tenantId: ${AZURE_SP_TENANTID}
          subscriptionId: ${AZURE_SP_SUBSCRIPTIONID}
          aadClientId: ${AZURE_SP_AADCLIENTID}
          aadClientSecret: ${AZURE_SP_AADCLIENTSECRET}
          resourceGroup: ${AZURE_RESOURCEGROUP}
          location: ${AZURE_LOCATION}
          subnetName: ${AZURE_SUBNETNAME}
          securityGroupName: ${AZURE_SECGROUPNAME}
          vnetName: ${AZURE_VNETNAME}
          routeTableName: ${AZURE_ROUTETABLE}

    - path: /etc/kubernetes/config/proxy-kubeconfig.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          users:
          - name: proxy
            user:
              client-certificate: /etc/kubernetes/ssl/apiserver-crt.pem
              client-key: /etc/kubernetes/ssl/apiserver-key.pem
          clusters:
          - name: local
            cluster:
              certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
              server: https://${API_DOMAIN_NAME}
          contexts:
          - context:
              cluster: local
              user: proxy
            name: service-account-context
          current-context: service-account-context
    - path: /etc/kubernetes/config/kubelet-kubeconfig.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/ssl/apiserver-crt.pem
              client-key: /etc/kubernetes/ssl/apiserver-key.pem
          clusters:
          - name: local
            cluster:
              certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
              server: https://${API_DOMAIN_NAME}
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: service-account-context
          current-context: service-account-context
    - path: /etc/kubernetes/config/controller-manager-kubeconfig.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          users:
          - name: controller-manager
            user:
              client-certificate: /etc/kubernetes/ssl/apiserver-crt.pem
              client-key: /etc/kubernetes/ssl/apiserver-key.pem
          clusters:
          - name: local
            cluster:
              certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
              server: https://${API_DOMAIN_NAME}
          contexts:
          - context:
              cluster: local
              user: controller-manager
            name: service-account-context
          current-context: service-account-context
    - path: /etc/kubernetes/config/scheduler-kubeconfig.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          users:
          - name: scheduler
            user:
              client-certificate: /etc/kubernetes/ssl/apiserver-crt.pem
              client-key: /etc/kubernetes/ssl/apiserver-key.pem
          clusters:
          - name: local
            cluster:
              certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
              server: https://${API_DOMAIN_NAME}
          contexts:
          - context:
              cluster: local
              user: scheduler
            name: service-account-context
          current-context: service-account-context

    - path: /etc/tokens/node
      filesystem: root
      mode: 0400
      contents:
        inline: |
          VAULT_TOKEN=${G8S_VAULT_TOKEN}

    - path: /etc/kubernetes/manifests/k8s-api-server.yaml
      filesystem: root
      mode: 0600
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: k8s-api-server
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
              - name: k8s-api-server
                image: quay.io/giantswarm/hyperkube:v1.10.2
                env:
                - name: HOST_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                command:
                - /hyperkube
                - apiserver
                - --allow-privileged=true
                - --insecure-bind-address=127.0.0.1
                - --insecure-port=8080
                - --kubelet-https=true
                - --secure-port=443
                - --cloud-provider=azure \
                - --cloud-config=/etc/kubernetes/config/azure.yaml
                - --bind-address=$(HOST_IP)
                - --etcd-prefix=giantswarm.io
                - --authorization-mode=RBAC
                - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,PodSecurityPolicy,PersistentVolumeClaimResize,DefaultStorageClass
                - --service-cluster-ip-range=${K8S_SERVICE_CIDR}
                - --etcd-servers=https://${ETCD_DOMAIN_NAME}:2379
                - --etcd-cafile=/etc/kubernetes/ssl/etcd/server-ca.pem
                - --etcd-certfile=/etc/kubernetes/ssl/etcd/server-crt.pem
                - --etcd-keyfile=/etc/kubernetes/ssl/etcd/server-key.pem
                - --advertise-address=$(HOST_IP)
                - --runtime-config=api/all=true
                - --logtostderr=true
                - --profiling=false
                - --repair-malformed-updates=false
                - --service-account-lookup=true
                - --tls-cert-file=/etc/kubernetes/ssl/apiserver-crt.pem
                - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
                - --client-ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
                - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem
                - --feature-gates=AdvancedAuditing=false,ExpandPersistentVolumes=true
                - --audit-log-path=/var/log/apiserver/audit.log
                - --audit-log-maxage=30
                - --audit-log-maxbackup=30
                - --audit-log-maxsize=100
                resources:
                  requests:
                    cpu: 300m
                    memory: 300Mi
                livenessProbe:
                  tcpSocket:
                    port: 443
                  initialDelaySeconds: 15
                  timeoutSeconds: 15
                ports:
                - containerPort: 443
                  hostPort: 443
                  name: https
                volumeMounts:
                - mountPath: /var/log/apiserver/
                  name: apiserver-log
                - mountPath: /etc/kubernetes/ssl/
                  name: ssl-certs-kubernetes
                  readOnly: true
                - mountPath: /etc/kubernetes/config/
                  name: k8s-config
                  readOnly: true
            volumes:
            - hostPath:
                path: /var/log/apiserver/
              name: apiserver-log
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /etc/kubernetes/config
              name: k8s-config
    - path: /etc/kubernetes/manifests/k8s-controller-manager.yaml
      filesystem: root
      mode: 0600
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: k8s-controller-manager
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
              - name: k8s-controller-manager
                image: quay.io/giantswarm/hyperkube:v1.10.2
                command:
                - /hyperkube
                - controller-manager
                - --master=https://${API_DOMAIN_NAME}:443
                - --logtostderr=true
                - --v=2
                - --cloud-provider=azure
                - --cloud-config=/etc/kubernetes/config/azure.yaml
                - --allocate-node-cidrs=true
                - --cluster-cidr=${POD_CIDR}
                - --profiling=false
                - --terminated-pod-gc-threshold=10
                - --use-service-account-credentials=true
                - --feature-gates=ExpandPersistentVolumes=true
                - --kubeconfig=/etc/kubernetes/config/controller-manager-kubeconfig.yaml
                - --root-ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
                - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem
                resources:
                  requests:
                    cpu: 200m
                    memory: 200Mi
                livenessProbe:
                  httpGet:
                    host: 127.0.0.1
                    path: /healthz
                    port: 10251
                  initialDelaySeconds: 15
                  timeoutSeconds: 15
                volumeMounts:
                - mountPath: /etc/kubernetes/ssl/
                  name: ssl-certs-kubernetes
                  readOnly: true
                - mountPath: /etc/kubernetes/secrets/
                  name: k8s-secrets
                  readOnly: true
                - mountPath: /etc/kubernetes/config/
                  name: k8s-config
                  readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /etc/kubernetes/config
              name: k8s-config
            - hostPath:
                path: /etc/kubernetes/secrets
              name: k8s-secrets
    - path: /etc/kubernetes/manifests/k8s-scheduler.yaml
      filesystem: root
      mode: 0600
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: k8s-scheduler
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
              - name: k8s-scheduler
                image: quay.io/giantswarm/hyperkube:v1.10.2
                command:
                - /hyperkube
                - scheduler
                - --master=https://${API_DOMAIN_NAME}:443
                - --logtostderr=true
                - --v=2
                - --profiling=false
                - --kubeconfig=/etc/kubernetes/config/scheduler-kubeconfig.yaml
                resources:
                  requests:
                    cpu: 200m
                    memory: 200Mi
                livenessProbe:
                  httpGet:
                    host: 127.0.0.1
                    path: /healthz
                    port: 10251
                  initialDelaySeconds: 15
                  timeoutSeconds: 15
                volumeMounts:
                - mountPath: /etc/kubernetes/ssl/
                  name: ssl-certs-kubernetes
                  readOnly: true
                - mountPath: /etc/kubernetes/config/
                  name: k8s-config
                  readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /etc/kubernetes/config
              name: k8s-config
    - path: /etc/ssh/sshd_config
      filesystem: root
      mode: 0600
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          PrintLastLog no # handled by PAM
          PrintMotd no # handled by PAM
          # Non defaults (#100)
          ClientAliveCountMax 2
          PasswordAuthentication no
          TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem

    - path: /opt/get-ca.sh
      filesystem: root
      mode: 0770
      contents:
        inline: |
          #!/bin/bash

          if [ -z "$1" ] || [ -z "$2" ]
          then
                  echo "Insufficient number of args"
                  echo "$0 <ive_ip_address>:<port> <output_file>"
                  exit
          fi
          echo Connecting to $1
          while ! `echo -n | openssl s_client -showcerts -connect $1 2>err.txt 1>out.txt`
          do
                sleep 1s
                echo retrying
          done
          if [ "$?" -ne "0" ]
          then
                  cat err.txt
                  exit
          fi
          echo -n Generating Certificate
          grep -in "\-----.*CERTIFICATE-----"  out.txt | cut -f 1 -d ":" 1> out1.txt
          let start_line=`tail -n 2 out1.txt | head -n 1`
          let end_line=`tail -n 1 out1.txt`
          if [ -z "$start_line" ]
          then
                  echo "error"
                  exit
          fi
          let nof_lines=$end_line-$start_line+1
          #echo "from $start_line to $end_line total lines $nof_lines"
          echo -n " .... "
          head -n $end_line out.txt | tail -n $nof_lines 1> out1.txt
          openssl x509 -in out1.txt -outform pem -out $2
          echo done.
          rm out.txt out1.txt err.txt

    - path: /etc/sysctl.d/hardening.conf
      filesystem: root
      mode: 0600
      contents:
        inline: |
          kernel.kptr_restrict = 2
          kernel.sysrq = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.tcp_timestamps = 0
          net.ipv6.conf.all.accept_redirects = 0
          net.ipv6.conf.default.accept_redirects = 0

    - path: /etc/audit/rules.d/10-docker.rules
      filesystem: root
      mode: 0644
      contents:
        inline: |
          -w /usr/bin/docker -k docker
          -w /var/lib/docker -k docker
          -w /etc/docker -k docker
          -w /etc/systemd/system/docker.service.d/10-giantswarm-extra-args.conf -k docker
          -w /etc/systemd/system/docker.service.d/01-wait-docker.conf -k docker
          -w /usr/lib/systemd/system/docker.service -k docker
          -w /usr/lib/systemd/system/docker.socket -k docker

    - path: /etc/systemd/system/audit-rules.service.d/10-Wait-For-Docker.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          [Service]
          ExecStartPre=/bin/bash -c "while [ ! -f /etc/audit/rules.d/10-docker.rules ]; do echo 'Waiting for /etc/audit/rules.d/10-docker.rules to be written' && sleep 1; done"

    - path: /etc/udev/rules.d/99-systemd.rules
      filesystem: root
      mode: 0644
      contents:
        inline: |
          SUBSYSTEM=="block", KERNEL=="sdd", TAG+="systemd"
          SUBSYSTEM=="block", KERNEL=="sdc", TAG+="systemd"
          SUBSYSTEM=="block", KERNEL=="sda6", TAG+="systemd"

systemd:
  units:
  - name: etcd2.service
    enabled: false
    mask: true
  - name: flanneld.service
    enabled: false
    mask: true
  - name: fleet.service
    enabled: false
    mask: true
  - name: fleet.socket
    enabled: false
    mask: true
  - name: update-engine.service
    enabled: false
    mask: true
  - name: locksmithd.service
    enabled: false
    mask: true
  - name: systemd-networkd-wait-online.service
    enabled: false
    mask: true
  - name: var-lib-etcd.mount
    enabled: true
    contents: |
      [Unit]
      Description=Mount disk to /var/lib/etcd
      Before=etcd3.service
      [Mount]
      What=/dev/disk/by-label/var-lib-etcd
      Where=/var/lib/etcd
      Type=ext4
      [Install]
      WantedBy=local-fs.target
  - name: var-lib-docker.mount
    enabled: true
    contents: |
      [Unit]
      Description=Mount disk to /var/lib/docker
      Before=docker.service
      [Mount]
      What=/dev/disk/by-label/docker
      Where=/var/lib/docker
      Type=xfs
      [Install]
      WantedBy=local-fs.target
  - name: usr-share-oem.mount
    enabled: true
    contents: |
      [Unit]
      Description=Mount OEM to /usr/share/oem
      [Mount]
      What=/dev/sda6
      Where=/usr/share/oem
      Type=ext4
      [Install]
      WantedBy=local-fs.target
  - name: wait-for-domains.service
    enabled: true
    contents: |
      [Unit]
      Description=Wait for etcd, k8s API and vault  domains to be available

      [Service]
      Type=oneshot
      ExecStart=/opt/wait-for-domains

      [Install]
      WantedBy=multi-user.target
  - name: os-hardening.service
    enabled: true
    contents: |
      [Unit]
      Description=Apply os hardening

      [Service]
      Type=oneshot
      ExecStartPre=-/bin/bash -c "gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel"
      ExecStartPre=/bin/bash -c "until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;"
      ExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf

      [Install]
      WantedBy=multi-user.target
  - name: get-vault-ssh-ca.service
    enabled: true
    contents: |
      [Unit]
      Description=get-vault-ssh-ca
      Requires=docker.service get-vault-ca.service
      After=docker.service get-vault-ca.service

      [Service]
      EnvironmentFile=/etc/tokens/node
      Environment=VAULT_ADDR=https://${VAULT_DOMAIN_NAME}:443
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/bin/bash -c "while ! curl -q --silent -o /dev/null https://${VAULT_DOMAIN_NAME};  do sleep 2s;echo wait for Vault;done;"
      ExecStart=/bin/bash -c '\
         result=$(curl -o /etc/ssh/trusted-user-ca-keys.pem \
                   --header "X-Vault-Token: $VAULT_TOKEN" \
                   $VAULT_ADDR/v1/ssh-client-signer/public_key);\
         [ $? -ne 0 ] && echo "Failed to fetch CA ssh public key" && exit 1 || echo "Sucesfully retrieved CA ssh public key";'
      [Install]
      WantedBy=multi-user.target
  - name: docker.service
    enabled: true
    dropins:
    - name: 10-giantswarm-extra-args.conf
      contents: |
        [Unit]
        Requires=var-lib-docker.mount
        After=var-lib-docker.mount

        [Service]
        Environment="DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs --log-opt max-size=50m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid"
        Environment="DOCKER_OPT_BIP=--bip=${DOCKER_CIDR}"
        Environment="DOCKER_OPTS=--live-restore --userland-proxy=false --icc=false"
  - name: k8s-setup-network-env.service
    enabled: true
    contents: |
      [Unit]
      Description=k8s-setup-network-env Service
      Wants=network.target docker.service waagent.service
      After=network.target docker.service waagent.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      Environment="IMAGE=quay.io/giantswarm/k8s-setup-network-environment:1f4ffc52095ac368847ce3428ea99b257003d9b9"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/mkdir -p /opt/bin/
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
      [Install]
      WantedBy=multi-user.target

  - name: get-vault-ca.service
    enabled: true
    contents: |
      [Unit]
      Description=get vault-ca into trusted certs
      Before=calico-certs.service api-certs.service etcd3-certs.service
      After=wait-for-domains.service waagent.service
      Requires=waagent.service wait-for-domains.service

      [Service]
      Type=oneshot
      ExecStartPre=/opt/get-ca.sh ${VAULT_DOMAIN_NAME}:443 /etc/ssl/certs/gs-ca.pem
      ExecStart=/sbin/update-ca-certificates
      RemainAfterExit=yes
      [Install]
      WantedBy=multi-user.target
  - name: calico-certs.service
    enabled: true
    contents: |
      [Unit]
      Description=calico-certs
      Requires=get-vault-ca.service k8s-setup-network-env.service docker.service wait-for-domains.service waagent.service
      After=get-vault-ca.service k8s-setup-network-env.service docker.service wait-for-domains.service waagent.service

      [Service]
      EnvironmentFile=/etc/environment
      EnvironmentFile=/etc/network-environment
      EnvironmentFile=/etc/tokens/node
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl/calico/
      ExecStartPre=/bin/bash -c "while ! curl -q --silent -o /dev/null https://${VAULT_DOMAIN_NAME};  do sleep 2s;echo wait for Vault;done;"
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/calico/:/etc/kubernetes/ssl/calico/ \
      quay.io/giantswarm/certctl:b07d0913d5cb369a6b605394bdd4be4633451be9 \
      issue \
      --vault-addr=https://${VAULT_DOMAIN_NAME} \
      --vault-token=$${VAULT_TOKEN} \
      --cluster-id=g8s \
      --common-name=${ETCD_DOMAIN_NAME} \
      --ttl=8760h \
      --crt-file=/etc/kubernetes/ssl/calico/client-crt.pem \
      --ip-sans=127.0.0.1,${DEFAULT_IPV4} \
      --alt-names=localhost \
      --key-file=/etc/kubernetes/ssl/calico/client-key.pem \
      --ca-file=/etc/kubernetes/ssl/calico/client-ca.pem
      ExecStop=/usr/bin/rm -rf /etc/kubernetes/ssl/calico/
      [Install]
      WantedBy=multi-user.target
  - name: etcd3-certs.service
    enabled: true
    contents: |
      [Unit]
      Description=etcd3-certs
      Requires=get-vault-ca.service k8s-setup-network-env.service docker.service
      After=get-vault-ca.service k8s-setup-network-env.service docker.service

      [Service]
      EnvironmentFile=/etc/environment
      EnvironmentFile=/etc/network-environment
      EnvironmentFile=/etc/tokens/node
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl/etcd/
      ExecStartPre=/bin/bash -c "while ! curl -q --silent -o /dev/null https://${VAULT_DOMAIN_NAME};  do sleep 2s;echo wait for Vault;done;"
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/etcd/:/etc/kubernetes/ssl/etcd/ \
      quay.io/giantswarm/certctl:b07d0913d5cb369a6b605394bdd4be4633451be9 \
      issue \
      --vault-addr=https://${VAULT_DOMAIN_NAME} \
      --vault-token=$${VAULT_TOKEN} \
      --cluster-id=g8s \
      --common-name=${ETCD_DOMAIN_NAME} \
      --ttl=8760h \
      --crt-file=/etc/kubernetes/ssl/etcd/server-crt.pem \
      --ip-sans=127.0.0.1,${DEFAULT_IPV4} \
      --alt-names=localhost \
      --key-file=/etc/kubernetes/ssl/etcd/server-key.pem \
      --ca-file=/etc/kubernetes/ssl/etcd/server-ca.pem
      ExecStartPost=/bin/cp /etc/kubernetes/ssl/etcd/server-crt.pem /etc/kubernetes/ssl/etcd/client-crt.pem
      ExecStartPost=/bin/cp /etc/kubernetes/ssl/etcd/server-ca.pem /etc/kubernetes/ssl/etcd/client-ca.pem
      ExecStartPost=/bin/cp /etc/kubernetes/ssl/etcd/server-key.pem /etc/kubernetes/ssl/etcd/client-key.pem
      ExecStop=/usr/bin/rm -rf /etc/kubernetes/ssl/etcd/
      [Install]
      WantedBy=multi-user.target
  - name: etcd3.service
    enabled: true
    contents: |
      [Unit]
      Description=etcd3
      Requires=k8s-setup-network-env.service etcd3-certs.service calico-certs.service var-lib-etcd.mount
      After=k8s-setup-network-env.service etcd3-certs.service calico-certs.service var-lib-etcd.mount
      Conflicts=etcd.service etcd2.service
      StartLimitIntervalSec=0

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      LimitNOFILE=40000
      Environment=IMAGE=quay.io/giantswarm/etcd:v3.3.1
      Environment=NAME=%p.service
      EnvironmentFile=/etc/network-environment
      ExecStartPre=-/usr/bin/docker stop  $NAME
      ExecStartPre=-/usr/bin/docker rm  $NAME
      ExecStartPre=-/usr/bin/docker pull $IMAGE
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-ca.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-ca.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-crt.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-crt.pem to be written' && sleep 1; done"
      ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-key.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-key.pem to be written' && sleep 1; done"
      ExecStart=/usr/bin/docker run \
          -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
          -v /etc/kubernetes/ssl/etcd/:/etc/etcd \
          -v /var/lib/etcd/:/var/lib/etcd  \
          --net=host  \
          --name $NAME \
          $IMAGE \
          etcd \
          --name etcd0 \
          --trusted-ca-file /etc/etcd/server-ca.pem \
          --cert-file /etc/etcd/server-crt.pem \
          --key-file /etc/etcd/server-key.pem \
          --client-cert-auth=true \
          --peer-trusted-ca-file /etc/etcd/server-ca.pem \
          --peer-cert-file /etc/etcd/server-crt.pem \
          --peer-key-file /etc/etcd/server-key.pem \
          --peer-client-cert-auth=true \
          --advertise-client-urls=https://${ETCD_DOMAIN_NAME}:2379 \
          --initial-advertise-peer-urls=https://127.0.0.1:2380 \
          --listen-client-urls=https://0.0.0.0:2379 \
          --listen-peer-urls=https://${DEFAULT_IPV4}:2380 \
          --initial-cluster-token k8s-etcd-cluster \
          --initial-cluster etcd0=https://127.0.0.1:2380 \
          --initial-cluster-state new \
          --data-dir=/var/lib/etcd \
          --enable-v2

      [Install]
      WantedBy=multi-user.target
  - name: etcd3-defragmentation.service
    enabled: false
    contents: |
      [Unit]
      Description=etcd defragmentation job
      After=docker.service etcd3.service
      Requires=docker.service etcd3.service

      [Service]
      Type=oneshot
      EnvironmentFile=/etc/environment
      Environment=IMAGE=quay.io/giantswarm/etcd:v3.3.1
      Environment=NAME=%p.service
      ExecStartPre=-/usr/bin/docker stop  $NAME
      ExecStartPre=-/usr/bin/docker rm  $NAME
      ExecStartPre=-/usr/bin/docker pull $IMAGE
      ExecStart=/usr/bin/docker run \
        -v /etc/kubernetes/ssl/etcd/:/etc/etcd \
        --net=host  \
        -e ETCDCTL_API=3 \
        --name $NAME \
        $IMAGE \
        etcdctl \
        --endpoints https://127.0.0.1:2379 \
        --cacert /etc/etcd/server-ca.pem \
        --cert /etc/etcd/server-crt.pem \
        --key /etc/etcd/server-key.pem \
        defrag

      [Install]
      WantedBy=multi-user.target
  - name: etcd3-defragmentation.timer
    enabled: true
    contents: |
      [Unit]
      Description=Execute etcd3-defragmentation every day at 3.30AM UTC

      [Timer]
      OnCalendar=*-*-* 03:30:00 UTC

      [Install]
      WantedBy=multi-user.target
  - name: k8s-kubelet.service
    enabled: true
    contents: |
      [Unit]
      Description=k8s-kubelet
      StartLimitIntervalSec=0
      After=k8s-setup-network-env.service docker.service calico-certs.service api-certs.service
      Requires=k8s-setup-network-env.service docker.service calico-certs.service api-certs.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      EnvironmentFile=/etc/network-environment
      Environment="IMAGE=quay.io/giantswarm/hyperkube:v1.10.2"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --pid=host --net=host --privileged=true \
      -v /:/rootfs:ro,rshared \
      -v /sys:/sys:ro \
      -v /dev:/dev:rw \
      -v /run/calico/:/run/calico/:rw \
      -v /run/docker/:/run/docker/:rw \
      -v /run/docker.sock:/run/docker.sock:rw \
      -v /var/log:/var/log:rw \
      -v /usr/lib/os-release:/etc/os-release \
      -v /usr/share/ca-certificates/:/etc/ssl/certs \
      -v /var/lib/docker/:/var/lib/docker:rw,rshared \
      -v /var/lib/kubelet/:/var/lib/kubelet:rw,rshared \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      -v /etc/kubernetes/manifests/:/etc/kubernetes/manifests/ \
      -v /etc/cni/net.d/:/etc/cni/net.d/ \
      -v /opt/cni/bin/:/opt/cni/bin/ \
      -e ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/server-ca.pem \
      -e ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/server-crt.pem \
      -e ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/server-key.pem \
      --name $NAME \
      $IMAGE \
      /hyperkube kubelet \
      --address=${DEFAULT_IPV4} \
      --port=10250 \
      --node-ip=${DEFAULT_IPV4} \
      --containerized \
      --enable-server \
      --logtostderr=true \
      --cloud-provider=azure \
      --cloud-config=/etc/kubernetes/config/azure.yaml \
      --machine-id-file=/rootfs/etc/machine-id \
      --cadvisor-port=4194 \
      --healthz-bind-address=${DEFAULT_IPV4} \
      --healthz-port=10248 \
      --cluster-dns=${K8S_DNS_IP} \
      --cluster-domain=cluster.local \
      --network-plugin=cni \
      --feature-gates=ExpandPersistentVolumes=true \
      --pod-manifest-path=/etc/kubernetes/manifests \
      --register-node=true \
      --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \
      --allow-privileged=true \
      --kubeconfig=/etc/kubernetes/config/kubelet-kubeconfig.yaml \
      --node-labels="node-role.kubernetes.io/master,role=master,ip=${DEFAULT_IPV4}" \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
      [Install]
      WantedBy=multi-user.target

  - name: api-certs.service
    enabled: true
    contents: |
      [Unit]
      Description=api-certs
      Requires=get-vault-ca.service k8s-setup-network-env.service docker.service wait-for-domains.service waagent.service
      After=get-vault-ca.service k8s-setup-network-env.service docker.service wait-for-domains.service waagent.service

      [Service]
      EnvironmentFile=/etc/environment
      EnvironmentFile=/etc/network-environment
      EnvironmentFile=/etc/tokens/node
      Environment=VAULT_ADDR=https://${VAULT_DOMAIN_NAME}
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl/
      ExecStartPre=/bin/bash -c "while ! curl -q --silent -o /dev/null https://${VAULT_DOMAIN_NAME};  do sleep 2s;echo wait for Vault;done;"
      ExecStartPre=/bin/bash -c '\
        export rsa_key=$(\
        docker run --rm -i\
        -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt\
        --net host\
        --privileged=true\
        -e VAULT_ADDR\
        -e VAULT_TOKEN\
        quay.io/giantswarm/vault:0.9.3\
        read -field=key secret/g8s_sa_sign_key 2>/dev/null\
       );\
       [ -z "$rsa_key" ] && echo "Failed to fetch g8s_sa_key" && exit 1 || echo "Sucesfully retrieved g8s_sa_key";\
        echo -e "-----BEGIN RSA PRIVATE KEY-----\n$rsa_key\n-----END RSA PRIVATE KEY-----" > /etc/kubernetes/ssl/service-account-key.pem'
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/:/etc/kubernetes/ssl/ \
      quay.io/giantswarm/certctl:b07d0913d5cb369a6b605394bdd4be4633451be9 \
      issue \
      --vault-addr=$${VAULT_ADDR} \
      --vault-token=$${VAULT_TOKEN} \
      --cluster-id=g8s \
      --common-name=${API_DOMAIN_NAME} \
      --ttl=8760h \
      --crt-file=/etc/kubernetes/ssl/apiserver-crt.pem \
      --ip-sans=127.0.0.1,${DEFAULT_IPV4},${K8S_API_IP} \
      --alt-names=localhost,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.local\
      --key-file=/etc/kubernetes/ssl/apiserver-key.pem \
      --ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
      [Install]
      WantedBy=multi-user.target
  - name: k8s-addons.service
    enabled: true
    contents: |
      [Unit]
      Description=Kubernetes Addons
      Wants=k8s-kubelet.service
      After=k8s-kubelet.service
      [Service]
      Type=oneshot
      EnvironmentFile=/etc/network-environment
      ExecStart=/opt/k8s-addons
      [Install]
      WantedBy=multi-user.target
storage:
  filesystems:
    - name: docker
      mount:
        device: /dev/sdc
        format: xfs
        wipe_filesystem: false
        label: docker
    - name: etcd
      mount:
        device: /dev/sdd
        format: ext4
        wipe_filesystem: false
        label: var-lib-etcd

