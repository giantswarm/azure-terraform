systemd:
  units:
    - name: update-engine.service
      enabled: false
      mask: true
    - name: locksmithd.service
      enabled: false
      mask: true
    - name: etcd2.service
      enabled: false
      mask: true
    - name: etcd-init.service
      command: stop
      enabled: false
      mask: true
    - name: fleet.service
      enabled: false
      mask: true
    - name: wait-for-domains.service
      enabled: true
      contents: |
        [Unit]
        Description=Wait for etcd and k8s API domains to be available

        [Service]
        Type=oneshot
        ExecStart=/opt/wait-for-domains

        [Install]
        WantedBy=multi-user.target
    - name: os-hardening.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply os hardening
        [Service]
        Type=oneshot
        ExecStart=-/bin/bash -c "gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel"
        [Install]
        WantedBy=multi-user.target
    - name: get-vault-ssh-ca.service
      enabled: true
      contents: |
        [Unit]
        Description=get-vault-ssh-ca
        Requires=docker.service get-vault-ca.service
        After=docker.service get-vault-ca.service

        [Service]
        EnvironmentFile=/etc/tokens/node
        Environment=VAULT_ADDR=https://${VAULT_DOMAIN_NAME}:443
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c '\
               result=$(curl -o /etc/ssh/trusted-user-ca-keys.pem \
                         --header "X-Vault-Token: $VAULT_TOKEN" \
                         $VAULT_ADDR/v1/ssh-client-signer/public_key);\
           [ $? -ne 0 ] && echo "Failed to fetch CA ssh public key" && exit 1 || echo "Sucesfully retrieved CA ssh public key";'
        [Install]
        WantedBy=multi-user.target
    - name: get-vault-ca.service
      enabled: true
      contents: |
        [Unit]
        Description=get vault-ca into trusted certs
        After=wait-for-domains.service
        Requies=wait-for-domains.service

        [Service]
        Type=oneshot
        ExecStartPre=/opt/get-ca.sh ${VAULT_DOMAIN_NAME}:443 /etc/ssl/certs/gs-ca.pem
        ExecStart=/sbin/update-ca-certificates
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target
storage:
  files:
    - path: /etc/tokens/node
      filesystem: root
      mode: 0400
      contents:
        inline: |
          VAULT_TOKEN=${G8S_VAULT_TOKEN}
    - path: /etc/ssh/sshd_config
      filesystem: root
      mode: 0600
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          PrintLastLog no # handled by PAM
          PrintMotd no # handled by PAM
          # Non defaults
          ClientAliveCountMax 2
          PasswordAuthentication no
          TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem
    - path: /opt/get-ca.sh
      filesystem: root
      mode: 0770
      contents:
        inline: |
          #!/bin/bash

          if [ -z "$1" ] || [ -z "$2" ]
          then
                  echo "Insufficient number of args"
                  echo "$0 <ive_ip_address>:<port> <output_file>"
                  exit
          fi
          echo Connecting to $1
          echo -n | openssl s_client -showcerts -connect $1 2>err.txt 1>out.txt
          if [ "$?" -ne "0" ]
          then
                  cat err.txt
                  exit
          fi
          echo -n Generating Certificate
          grep -in "\-----.*CERTIFICATE-----"  out.txt | cut -f 1 -d ":" 1> out1.txt
          let start_line=`tail -n 2 out1.txt | head -n 1`
          let end_line=`tail -n 1 out1.txt`
          if [ -z "$start_line" ]
          then
                  echo "error"
                  exit
          fi
          let nof_lines=$end_line-$start_line+1
          #echo "from $start_line to $end_line total lines $nof_lines"
          echo -n " .... "
          head -n $end_line out.txt | tail -n $nof_lines 1> out1.txt
          openssl x509 -in out1.txt -outform pem -out $2
          echo done.
          rm out.txt out1.txt err.txt
    - path: /opt/wait-for-domains
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/bin/bash
          domains="${VAULT_DOMAIN_NAME}"

          for domain in $domains; do
            until nslookup $domain; do
                echo "Waiting for domain $domain to be available"
                sleep 5
            done

            echo "Successfully resolved domain $domain"
          done
