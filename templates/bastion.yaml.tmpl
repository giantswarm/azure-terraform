systemd:
  units:
    - name: update-engine.service
      enabled: false
      mask: true
    - name: locksmithd.service
      enabled: false
      mask: true
    - name: etcd2.service
      enabled: false
      mask: true
    - name: etcd-init.service
      command: stop
      enabled: false
      mask: true
    - name: fleet.service
      enabled: false
      mask: true
    {{if eq .Provider "aws" -}}
    - name: journald-cloudwatch-logs.service
      enabled: {{ .CloudwatchForwarderEnabled }}
      contents: |
        [Unit]
        Description=journald cloudwatch forwarder
        Requires=docker.service
        After=docker.service

        [Service]
        Environment="NAME=%p.service"
        Environment="IMAGE=quay.io/giantswarm/journald-cloudwatch-logs"
        Restart=always
        RestartSec=10
        TimeoutStopSec=10
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cloudwatch-logs
        ExecStartPre=/usr/bin/docker pull $IMAGE
        ExecStart=/usr/bin/docker run --rm --net=host \
                  -v /etc/journald-cloudwatch.conf:/etc/journald-cloudwatch.conf \
                  -v /var/log/journal/:/var/log/journal/ \
                  -v /var/lib/cloudwatch-logs/:/var/lib/cloudwatch-logs/ \
                  --name $NAME $IMAGE /etc/journald-cloudwatch.conf
        ExecStop=-/usr/bin/docker stop -t 10 $NAME

        [Install]
        WantedBy=multi-user.target
    {{end }}
storage:
  files:
    - path: /etc/ssh/sshd_config
      filesystem: root
      mode: 0600
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          PrintLastLog no # handled by PAM
          PrintMotd no # handled by PAM
          # Non defaults
          ClientAliveCountMax 2
          PasswordAuthentication no
          TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem
    - path: /opt/get-ca.sh
      filesystem: root
      mode: 0770
      contents:
        inline: |
          #!/bin/bash

          if [ -z "$1" ] || [ -z "$2" ]
          then
                  echo "Insufficient number of args"
                  echo "$0 <ive_ip_address>:<port> <output_file>"
                  exit
          fi
          echo Connecting to $1
          echo -n | openssl s_client -showcerts -connect $1 2>err.txt 1>out.txt
          if [ "$?" -ne "0" ]
          then
                  cat err.txt
                  exit
          fi
          echo -n Generating Certificate
          grep -in "\-----.*CERTIFICATE-----"  out.txt | cut -f 1 -d ":" 1> out1.txt
          let start_line=`tail -n 2 out1.txt | head -n 1`
          let end_line=`tail -n 1 out1.txt`
          if [ -z "$start_line" ]
          then
                  echo "error"
                  exit
          fi
          let nof_lines=$end_line-$start_line+1
          #echo "from $start_line to $end_line total lines $nof_lines"
          echo -n " .... "
          head -n $end_line out.txt | tail -n $nof_lines 1> out1.txt
          openssl x509 -in out1.txt -outform pem -out $2
          echo done.
          rm out.txt out1.txt err.txt
    {{if eq .Provider "aws" -}}
    - path: /etc/journald-cloudwatch.conf
      filesystem: root
      mode: 0544
      contents:
        inline: |
          log_group = "{{ .ClusterName }}_bastion"
          state_file = "/var/lib/cloudwatch-logs/state"
          log_stream = "{{ .ClusterName }}_bastion"
          journal_dir = "/var/log/journal"
          log_priority = "{{ .BastionLogPriority }}"
    {{- end }}
{{ .BastionUsers }}
